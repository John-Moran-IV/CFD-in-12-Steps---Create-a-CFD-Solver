from mpl_toolkits.mplot3d import axes3d, Axes3D

import numpy as np
from matplotlib import pyplot as plt, cm

nx = 81  # Grid points in x-dir
ny = 81  # Grid points in y-dir
nt = 100  # Number of time steps
c = 1  # Wave speed
dx = 2 / (nx - 1)  # Spacing between adjacent x-dir grid points
dy = 2 / (ny - 1)  # Spacing between adjacent y-dir grid points
sigma = 0.2  # Courant number to enforce stability
dt = sigma * dx  # Time step duration as a function of the Courant
# and the distance between x-dir grid points.

x = np.linspace(0, 2, nx)  # An array of values evenly spaced
y = np.linspace(0, 2, ny)  # between 0 and 2 which total nx and ny

u = np.ones((ny, nx))  # Creates a matrix with dimension nx by ny
un = np.ones((ny, nx))  # Creates a temporary matrix with dimensions nx by ny

# Initial Conditions for the 'u' function
u[int(0.5 / dy): int(1 / dy + 1), int(0.5 / dx): int(1 / dx + 1)] = 2

fig = plt.figure(figsize=(11, 7), dpi=100)
ax = fig.gca(projection='3d')
X, Y = np.meshgrid(x, y)
surf = ax.plot_surface(X, Y, u[:], cmap=cm.viridis)
plt.show()

u = np.ones((ny, nx))
u[int(.5 / dy):int(1 / dy + 1), int(.5 / dx):int(1 / dx + 1)] = 2

# Solving using for loops
for n in range(nt + 1):
    un = u.copy()
    row, col = u.shape
    for j in range(1, row):
        for i in range(1, col):
            u[j, i] = (un[j, i] - (c * dt / dx * (un[j, i] - un[j, i - 1])) -
                                  (c * dt / dy * (un[j, i] - un[j - 1, i])))
            u[0, :] = 1
            u[-1, :] = 1
            u[:, 0] = 1
            u[:, -1] = 1

fig = plt.figure(figsize=(11, 7), dpi=100)
ax = fig.gca(projection='3d')
surf2 = ax.plot_surface(X, Y, u[:], cmap=cm.viridis)
plt.show()

# Solving using array operations
u = np.ones((ny, nx))
u[int(.5 / dy):int(1 / dy + 1), int(.5 / dx):int(1 / dx + 1)] = 2

for n in range(nt + 1):
    un = u.copy()
    u[1:, 1:] = (un[1:, 1:] - (c * dt / dx * (un[1:, 1:] - un[1:, :-1])) -
                              (c * dt / dy * (un[1:, 1:] - un[:-1, 1:])))
    u[0, :] = 1
    u[-1, :] = 1
    u[:, 0] = 1
    u[:, -1] = 1

fig = plt.figure(figsize=(11, 7), dpi=100)
ax = fig.gca(projection='3d')
surf2 = ax.plot_surface(X, Y, u[:], cmap=cm.viridis)
